File: game.py Summary

**Classes:**

1.  **Name:** `GameState(Enum)`
    *   **Description:** An enumeration defining constants that represent the different possible states the overall application can be in (e.g., main menu, credits screen, active game). Inherits from `enum.Enum`.
    *   **Members (Constants):**
        *   `MENU`: Represents the main menu state.
        *   `CREDITS`: Represents the credits screen state.
        *   `GAME_MENU`: Represents the state where the active game/battle menu is displayed.
        *   `OPTIONS`: Represents the options menu state.

2.  **Name:** `Game`
    *   **Description:** A class that encapsulates the state and logic for an active game session (likely a battle). It manages player/opponent health, turns, status effects, experience, and level progression.
    *   **Methods (Functions within the class):**
        *   **Name:** `__init__`
            *   **Parameters:** `self` (implicit instance reference).
            *   **Description:** Constructor for the `Game` class. Initializes the instance variables (attributes) for a new game session, setting default values for health, turn, max health, status effects (harden, empower), experience, level, and experience needed for the next level.
        *   **Name:** `opponent_turn`
            *   **Parameters:** `self`.
            *   **Description:** Simulates the opponent's turn. Randomly selects one of the opponent's available moves ("Kick", "Heal", "Stomp", "Scratch") and executes the corresponding action (applying damage to the player or healing the opponent). Calls `end_turn` after the action.
        *   **Name:** `_apply_damage`
            *   **Parameters:** `self`, `damage` (int/float).
            *   **Description:** Internal helper method (indicated by `_`) to apply damage to the player's health (`self.health`). Reduces damage by half if `self.harden_active` is true. Calls `check_win` after applying damage.
        *   **Name:** `_heal_opponent`
            *   **Parameters:** `self`, `heal_amount` (int/float).
            *   **Description:** Internal helper method to heal the opponent (`self.health2`), ensuring health does not exceed `self.max_health`. Prints a confirmation message.
        *   **Name:** `end_turn`
            *   **Parameters:** `self`.
            *   **Description:** Manages the transition between turns. Checks for win conditions first. If no win, it switches the `self.turn` variable (1 for player, 2 for opponent). If it becomes the opponent's turn (turn 2), it calls `opponent_turn`. If it becomes the player's turn (turn 1), it resets `self.harden_active` to `False`.
        *   **Name:** `player_kick`
            *   **Parameters:** `self`.
            *   **Description:** Executes the player's "Kick" action. Applies damage to the opponent (`self.health2`), doubling it if `self.empower_active` is true. Resets `self.empower_active`. Calls `check_win` and `end_turn`.
        *   **Name:** `player_heal`
            *   **Parameters:** `self`.
            *   **Description:** Executes the player's "Heal" action. Increases the player's health (`self.health`), capped at `self.max_health`. Calls `end_turn`.
        *   **Name:** `player_harden`
            *   **Parameters:** `self`.
            *   **Description:** Executes the player's "Harden" action. Sets `self.harden_active` to `True`. Calls `end_turn`.
        *   **Name:** `player_empower`
            *   **Parameters:** `self`.
            *   **Description:** Executes the player's "Empower" action. Sets `self.empower_active` to `True`. Calls `end_turn`.
        *   **Name:** `check_win`
            *   **Parameters:** `self`.
            *   **Description:** Checks if the opponent's health (`self.health2`) is less than or equal to 0. If so, grants the player experience, checks for a level up, and then calls `reset_game`.
        *   **Name:** `check_level_up`
            *   **Parameters:** `self`.
            *   **Description:** Checks if the player's current `experience` meets or exceeds the `experience_needed`. If so, increments the player's `level`, subtracts the needed experience from the current experience, increases the `experience_needed` for the *next* level, and prints a level-up message. Uses a `while` loop to handle multiple level-ups from a single experience gain.
        *   **Name:** `reset_game`
            *   **Parameters:** `self`.
            *   **Description:** Resets the game state attributes (`health`, `health2`, `turn`, `harden_active`, `empower_active`) to their initial values. Importantly, it also sets the global game state (`globalSettings.current_state`) back to `GameState.MENU`, effectively ending the current battle/game session and returning the user to the main menu.
    *   **Instance Variables (Attributes initialized in `__init__`):**
        *   `health`: Player's current health.
        *   `health2`: Opponent's current health.
        *   `turn`: Indicates whose turn it is (1 for player, 2 for opponent).
        *   `max_health`: Maximum health value for both player and opponent.
        *   `harden_active`: Boolean flag, true if player used "Harden" on their last turn.
        *   `empower_active`: Boolean flag, true if player used "Empower" on their last turn.
        *   `experience`: Player's current experience points.
        *   `experience_needed`: Experience points required for the player to reach the next level.
        *   `level`: Player's current level.

**Global Variables:**

*   **None defined directly at the global scope within this file, other than the Class definitions above.**
    *   **Note:** This file primarily defines the `GameState` enum and the `Game` class. It imports and uses `globalSettings` and `random` but doesn't create its own simple global variables outside of the class structures. The instance variables listed under the `Game` class are attributes of *objects* created from that class, not global variables themselves.
