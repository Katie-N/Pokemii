**File:** buttons.py

**Overview:** This file defines a reusable `Button` class for creating clickable UI elements in Pygame and includes specific functions that act as callbacks for button actions, primarily related to game state changes and player actions within the game.

---

**Classes:**

1.  **`Button`**
    *   **Description:** Represents a clickable button UI element. It handles drawing, hover effects, and executing an action upon being clicked.
    *   **Methods:**
        *   `__init__(self, x: int, y: int, width: int, height: int, text: str, color: Tuple[int, int, int], hover_color: Tuple[int, int, int], font: pygame.font.Font, action: Callable = None, arg=None)`
            *   **Description:** Initializes a new Button instance.
            *   **Parameters:**
                *   `x` (int): The x-coordinate of the button's top-left corner.
                *   `y` (int): The y-coordinate of the button's top-left corner.
                *   `width` (int): The width of the button rectangle.
                *   `height` (int): The height of the button rectangle.
                *   `text` (str): The text to display on the button.
                *   `color` (Tuple[int, int, int]): The default background color (RGB tuple).
                *   `hover_color` (Tuple[int, int, int]): The background color when the mouse hovers over the button (RGB tuple).
                *   `font` (pygame.font.Font): The Pygame font object used for rendering the button text.
                *   `action` (Callable, optional): The function to be called when the button is clicked. Defaults to `None`.
                *   `arg` (any, optional): An optional argument to pass to the `action` function when it's called. Defaults to `None`.
        *   `draw(self, screen: pygame.Surface)`
            *   **Description:** Draws the button onto the provided Pygame surface. It changes color if the button is currently being hovered over.
            *   **Parameters:**
                *   `screen` (pygame.Surface): The Pygame surface to draw the button on.
        *   `handle_event(self, event: pygame.event.Event)`
            *   **Description:** Handles Pygame events, specifically checking for mouse motion (to update hover state) and mouse button clicks (to trigger the button's action if clicked).
            *   **Parameters:**
                *   `event` (pygame.event.Event): The Pygame event to process.
        *   `__repr__(self)`
            *   **Description:** Returns a string representation of the Button object, typically used for debugging.
            *   **Parameters:** None.

---

**Functions:**

1.  **`start_game(game: Game)`**
    *   **Description:** Changes the global game state to `GameState.GAME_MENU`, typically initiating the main gameplay or battle screen.
    *   **Parameters:**
        *   `game` (Game): The main game instance (passed as an argument, though not directly used in the current function body, it's part of the signature likely for consistency or future use).

2.  **`open_options()`**
    *   **Description:** Changes the global game state to `GameState.OPTIONS`, intended to display an options menu.
    *   **Parameters:** None.

3.  **`open_credits()`**
    *   **Description:** Changes the global game state to `GameState.CREDITS`, intended to display a credits screen.
    *   **Parameters:** None.

4.  **`exit_action()`**
    *   **Description:** Prints an exit message, quits the Pygame library, and terminates the application.
    *   **Parameters:** None.

5.  **`back_to_menu(game: Game)`**
    *   **Description:** Changes the global game state back to `GameState.MENU` and calls the `reset_game` method on the provided game object to reset its state.
    *   **Parameters:**
        *   `game` (Game): The main game instance, used to call its `reset_game` method.

6.  **`create_game_menu_buttons(font: pygame.font.Font, game: Game) -> List[Button]`**
    *   **Description:** Creates and returns a list of `Button` objects specifically configured for the in-game action menu (e.g., Kick, Heal, Harden, Empower) and a button to return to the main menu. It links these buttons to corresponding methods within the `game` object or other action functions.
    *   **Parameters:**
        *   `font` (pygame.font.Font): The font object to use for the button text.
        *   `game` (Game): The main game instance, whose methods (`player_kick`, `player_heal`, etc.) are used as actions for the created buttons.

---

**Variables (Module-Level):**

*   This file primarily defines a class and functions. It imports modules (`pygame`, `globalSettings`, `game`, `typing`) and uses constants/enums from `globalSettings` (like `BLACK`, `LIGHT_BLUE`, `GRAY`, `SCREEN_WIDTH`, `SCREEN_HEIGHT`) and `game` (like `GameState`, `Game`), but it does not define significant module-level variables itself, other than the `Button` class definition. Local variables like `game_button_width` exist within `create_game_menu_buttons` but are not accessible outside that function's scope.
