File: main.py Summary

**Functions:**

1.  **Name:** `draw_text`
    *   **Parameters:**
        *   `text` (str): The text string to be rendered.
        *   `font` (pygame.font.Font): The Pygame font object to use for rendering.
        *   `color` (tuple): The RGB color tuple for the text (e.g., (255, 255, 255) for white).
        *   `surface` (pygame.Surface): The Pygame surface onto which the text will be drawn.
        *   `x` (int): The x-coordinate of the top-left corner of the text.
        *   `y` (int): The y-coordinate of the top-left corner of the text.
    *   **Description:** This function renders the given `text` using the specified `font` and `color` onto the provided `surface` at the given `x` and `y` coordinates. It creates a text object and a rectangle for the text, then blits (draws) the text onto the surface.

2.  **Name:** `main`
    *   **Parameters:** None.
    *   **Description:** This function is the main game loop. It initializes the game screen, sets the window caption, and sets the mouse cursor to a hand. It then enters a `while` loop that continues as long as the `running` variable is `True`. Inside the loop, it handles events (like quitting the game), updates game logic (currently a placeholder), draws the game elements (currently a green background and "Game is Running!" text), and updates the display. When the loop ends (e.g., when the user quits), it calls `pygame.quit()` to shut down Pygame.

**Variables:**

*   **Global Variables:**
    *   `BLACK`: (tuple) RGB tuple representing the color black (0, 0, 0).
    *   `WHITE`: (tuple) RGB tuple representing the color white (255, 255, 255).
    *   `GREEN`: (tuple) RGB tuple representing the color green (0, 255, 0).
    *   `infoObject`: (pygame.display.Info) An object holding information about the current display capabilities, obtained from `pygame.display.Info()`.
    *   `MAX_WIDTH`: (int) The maximum width of the detected display monitor.
    *   `MAX_HEIGHT`: (int) The maximum height of the detected display monitor.
    * `SCREEN_HEIGHT`: (int) The height of the game screen in pixels. Calculated based on the detected monitor's aspect ratio to maintain a 16:9 ratio.
    * `SCREEN_WIDTH`: (int) The width of the game screen in pixels. Calculated based on the detected monitor's aspect ratio to maintain a 16:9 ratio.
    *   `SCREEN_SIZE`: (tuple) A tuple containing the final calculated `(SCREEN_WIDTH, SCREEN_HEIGHT)`.

*   **Local Variables (within `main`):**
    *   `screen`: (pygame.Surface) The main Pygame display surface, created using `pygame.display.set_mode(SCREEN_SIZE)`.
    *   `title_font`: (pygame.font.Font) A Pygame font object created with a size of 64, used for the title text.
    *   `running`: (bool) A boolean flag that controls the main game loop. The loop continues as long as `running` is `True`.
* **Variables from imported modules**
    * `mainMenu`: imported module that is used to call the `main_menu` function.

**Important Notes:**

*   **Initialization:** The `pygame.init()` call at the beginning initializes Pygame.
*   **Screen Setup:** The code dynamically calculates `SCREEN_WIDTH` and `SCREEN_HEIGHT` based on the monitor's aspect ratio to maintain a 16:9 aspect ratio.
*   **Event Handling:** The `for event in pygame.event.get():` loop handles events, and currently, it only checks for the `pygame.QUIT` event.
*   **Drawing:** The `draw_text` function is used to draw text, and the `screen.fill(GREEN)` call fills the screen with green.
*   **Display Update:** `pygame.display.flip()` updates the entire screen to show what has been drawn.
* **mainMenu.main_menu()** The main function calls the main_menu function from the mainMenu module.
* **if __name__ == "__main__":** This is the standard python way to check if the file is being run directly.
* **pygame.mouse.set_cursor** This sets the mouse cursor to a hand.
